import seaborn as sns
import matplotlib.pyplot as plt
from plotly import graph_objs as go
import streamlit as st
from events.create_data import create_dummy_data
from events.acquisition_data import acquisition_events_cohort, users_per_period
from events.funnel_data import group_funnel_dfs
from events.retention_data import retention_table
from events.sankey_data import sankey_df

# Acquisition - Growth


def plot_users_per_period(events, acquisition_event_name, user_source_col, period='w'):
    """
    Function use to create multi-axes plot and table for all the stats generated by
    "stats.retention.users_per_period"


    :param events: (DataFrame)
                    events dataframe

    :param acquisition_event_name: (str)
                        event name defining the user acquisition point

    :param user_source_col: (str)
                        name of column defining if user is an Organic/Non-organic acquisition

    :param period: (str)
                    str denoting period for cohort breakdown.
                    Use 'd' for daily, 'w' for weekly or 'm' for monthly

    :return: (fig)
                    plotly figure
    """

    # generate user stats per period
    df = users_per_period(events, acquisition_event_name, user_source_col, period)

    # needed to convert the month period to time_manipulations
    if period == 'm':
        df.index = df.index.to_timestamp().strftime("%Y-%m")

    # new users
    new1 = go.Bar(
        x=df.index,
        y=df['New Users (Total)'].values,
        text=df['New Users (Total)'].values,
        textposition='auto',
        marker=dict(
            color='rgb(55, 83, 109)'),
        name='New Users(Total)',
        xaxis='x1',
        yaxis='y1'
    )

    # new users for 2nd axis
    new2 = go.Bar(
        x=df.index,
        y=df['New Users (Total)'].values,
        text=df['New Users (Total)'].values,
        textposition='auto',
        marker=dict(
            color='rgb(55, 83, 109)'),
        name='New Users(Total)',
        xaxis='x1',
        yaxis='y2'
    )

    # organic users
    organic = go.Bar(
        x=df.index,
        y=df['New Organic Users'].values,
        text=df['New Organic Users'].values,
        textposition='auto',
        xaxis='x1',
        yaxis='y1',
        marker=dict(
            color='rgb(58,193,0)'),
        name='New Organic Users'
    )

    # paid users
    non_organic = go.Bar(
        x=df.index,
        y=df['New Paid Users'].values,
        text=df['New Paid Users'].values,
        textposition='auto',
        xaxis='x1',
        yaxis='y1',
        marker=dict(
            color='crimson'),
        name='New Paid Users'
    )

    # active users
    active = go.Bar(
        x=df.index,
        y=df['Active Users'].values,
        text=df['Active Users'].values,
        textposition='auto',
        name='Active Users',
        xaxis='x1',
        yaxis='y2',
        marker=dict(
            color='rgb(153,0,76)')
    )

    # returning users
    returning = go.Bar(
        x=df.index,
        y=df['Returning Users'].values,
        text=df['Returning Users'].values,
        textposition='auto',
        name='Returning Users',
        xaxis='x1',
        yaxis='y2',
        marker=dict(
            color='lightsalmon')
    )

    # periodic growth
    growth = go.Scatter(
        x=df.index,
        y=df['W/W Growth'].values,
        name='W/W Growth',
        xaxis='x1',
        yaxis='y3',
        marker=dict(
            color='rgb(0,153,153)')
    )

    # NR ratio
    NR_ratio = go.Scatter(
        x=df.index,
        y=df['N/R Ratio'].values,
        name='N/R Ratio',
        xaxis='x1',
        yaxis='y4',
        marker=dict(
            color='indianred')
    )

    # axis object
    axis = dict(
        showline=True,
        zeroline=False,
        showgrid=True,
        ticklen=4,
        gridcolor='#ffffff',
        tickfont=dict(size=10),
        linecolor='black',
        linewidth=1
    )

    layout = dict(
        width=950,
        height=800,
        autosize=True,
        barmode='stack',  # 'group',
        margin={"l": 100, "r": 0, "t": 10, "b": 0, "pad": 0},
        showlegend=True,
        uniformtext_minsize=8,
        xaxis1=dict(axis, **dict(domain=[0, 1], anchor='y1', showticklabels=True,
                                 ticktext=df.index,
                                 tickvals=df.index,
                                 tickangle=-45),
                    rangeselector=dict(
                        buttons=list([
                            dict(count=1,
                                 label="1m",
                                 step="month",
                                 stepmode="backward"),
                            dict(count=3,
                                 label="3m",
                                 step="month",
                                 stepmode="backward"),
                            dict(count=6,
                                 label="6m",
                                 step="month",
                                 stepmode="backward"),
                            dict(count=1,
                                 label="1yr",
                                 step="year",
                                 stepmode="backward"),
                            dict(step="all")
                        ])
        ),
            rangeslider=dict(
                        visible=False,
                        thickness=0.05
        ),
            type="date"),
        yaxis1=dict(
            axis, **dict(domain=[0, 0.10],
                         anchor='x1', title='New users<br>per source'),
            showgrid=True, gridwidth=1, gridcolor='LightPink'),
        yaxis2=dict(axis, **dict(domain=[0.12, 0.7], anchor='x1', title='New/Active/<br>Returning')),
        yaxis3=dict(axis, **dict(domain=[0.705, 0.85], anchor='x1', hoverformat='.2f',
                                 title='Growth%'), showgrid=True, gridwidth=1, gridcolor='LightPink'),
        yaxis4=dict(axis, **dict(domain=[0.855, 1], anchor='x1', title='NR<br>Ratio')),
        hovermode='closest',
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',

    )

    data = [new1, organic, non_organic,
            new2, active, returning,
            growth,
            NR_ratio]

    return dict(data=data, layout=layout)

# Stacked Funnel charts


@st.cache  # ðŸ‘ˆ This function will be cached
def plot_stacked_funnel(events, steps, col=None, from_date=None, to_date=None, step_interval=0):
    """
    Function used for producing a funnel plot

    :param events: (DataFrame)
                    events dataframe

    :param steps: (list)
                    list containing funnel steps as strings

    :param col: (str)
                    column to be used for grouping the funnel dataframes

    :return: (plt.figure) funnel plot
    """

    # create list to append each trace to
    # this will be passed to "go.Figure" at the end
    data = []

    # if col is provided, create a funnel_df for each entry in the "col"
    if col:
        # generate dict of funnel dataframes
        dict_ = group_funnel_dfs(events, steps, col)
        title = 'Funnel plot per {}'.format(col)
    else:
        funnel_df = create_funnel_df(events, steps, from_date=from_date, to_date=to_date, step_interval=step_interval)
        dict_ = {'Total': funnel_df}
        title = 'Funnel plot'

    for t in dict_.keys():
        trace = go.Funnel(
            name=t,
            y=dict_[t].step.values,
            x=dict_[t].val.values,
            textinfo="value+percent previous"
        )
        data.append(trace)

    layout = go.Layout(margin={"l": 180, "r": 0, "t": 30, "b": 0, "pad": 0},
                       funnelmode="stack",
                       showlegend=True,
                       hovermode='closest',
                       plot_bgcolor='rgba(228, 222, 239, 0.65)',
                       title='Funnel Plot per {}'.format(col),
                       legend=dict(orientation="h",
                                   yanchor="bottom",
                                   y=1.02,
                                   xanchor="right",
                                   x=1,
                                   font=dict(
                                       size=12,
                                       color="black"),
                                   bgcolor="LightSteelBlue",
                                   bordercolor="Black",
                                   borderwidth=2
                                   )
                       )

    return go.Figure(data, layout)

# Retention


@st.cache  # ðŸ‘ˆ This function will be cached
def retention_heatmap(df, colorscale='armyrose'):
    """
    Function used to plot retention heatmaps.

    :param df: (dataframe)
                dataframe resembling the retention table

    :param colorscale: (str)
                colorscale

    :return: fig
    """

    data = [
        go.Heatmap(
            z=df[df.columns.difference(['TotalUserCount'])].values,
            x=df[df.columns.difference(['TotalUserCount'])[::-1]].columns,
            y=df[df.columns.difference(['TotalUserCount'])].index,
            colorscale=colorscale
        )
    ]

    axis_template = dict(autorange="reversed", type='category',
                         showgrid=False, zeroline=False,
                         linecolor='black', showticklabels=True,
                         ticks='')

    layout = go.Layout(
        xaxis=axis_template,
        yaxis=axis_template,
        showlegend=False,
        autosize=True,
        xaxis_title="Cohort Period",
        yaxis_title="Cohort",
        font_family="Courier New",
        font_color="blue",
        title_font_family="Times New Roman",
        title_font_color="black",
        title_font_size=30,
        title="Cohort Based Retention Rate",
        hoverlabel=dict(
            bgcolor="white",
            font_size=16,
            font_family="Rockwell"))

    fig = go.Figure(data=data, layout=layout)

    return fig

# Sankey Diagram


@st.cache  # ðŸ‘ˆ This function will be cached
def plot_user_flow(events, starting_step, n_steps=3, events_per_step=5, title='Sankey Diagram'):
    """
    Function used to generate the sankey plot for user journeys.

    :param events: (DataFrame)
                    Mixpanel events dataframe

    :param starting_step: (str)
                    the event which should be considered as the starting point of the user journey.

    :param n_steps: (int)
                    number of events to return

    :param events_per_step: (int)
                    number of events to show per step.
                    The rest (less frequent) events will be grouped together into an "Other" block.

    :param title: (str)
                    Title for the plot

    :return: (plotly fig)
    """
    # transform raw events dataframe into  source:target pairs including node ids and count of each combination
    label_list, colors_list, source_target_df = sankey_df(events, starting_step, n_steps, events_per_step)

    # creating the sankey diagram
    data = dict(
        type='sankey',
        node=dict(
            pad=20,
            thickness=20,
            color=colors_list,
            line=dict(
                color="black",
                width=0.5
            ),
            label=label_list
        ),
        link=dict(
            source=source_target_df['source_id'].values.tolist(),
            target=source_target_df['target_id'].values.tolist(),
            value=source_target_df['count'].astype(int).values.tolist(),
            hoverlabel=dict(
                bgcolor='#C2C4C7')
        )
    )

    # set window width
    if n_steps < 5:
        width = None
    else:
        width = n_steps * 250

    layout = dict(
        height=600,
        width=width,
        margin=dict(t=30, l=0, r=0, b=30),
        #         autosize=True,
        title=title,
        font=dict(
            size=10
        )
    )

    fig = dict(data=[data], layout=layout)
    return fig
